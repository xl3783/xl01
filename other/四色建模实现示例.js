// 港口进出口流程四色建模实现示例
// 基于四色建模法的TOS港口操作系统领域模型

// 工具函数
function generateUUID() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0;
    const v = c == 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

// ==================== 绿色对象（时刻-间隔）====================

// 船舶相关事件
class 船舶到港事件 {
  constructor(船舶信息, 到港时间, 锚泊位置) {
    this.事件ID = generateUUID();
    this.船舶信息 = 船舶信息;
    this.到港时间 = 到港时间;
    this.锚泊位置 = 锚泊位置;
    this.事件类型 = '船舶到港';
    this.事件状态 = '已创建';
  }
  
  完成事件() {
    this.事件状态 = '已完成';
    this.完成时间 = new Date();
  }
}

class 集装箱卸船事件 {
  constructor(集装箱信息, 船舶信息, 卸船时间, 堆存位置) {
    this.事件ID = generateUUID();
    this.集装箱信息 = 集装箱信息;
    this.船舶信息 = 船舶信息;
    this.卸船时间 = 卸船时间;
    this.堆存位置 = 堆存位置;
    this.事件类型 = '集装箱卸船';
    this.事件状态 = '已创建';
  }
  完成事件() {
    this.事件状态 = '已完成';
    this.完成时间 = new Date();
  }
}

// ==================== 黄色对象（参与者-角色）====================

class 港口调度员 {
  constructor(员工信息) {
    this.角色ID = generateUUID();
    this.员工信息 = 员工信息;
    this.角色类型 = '港口调度员';
    this.权限范围 = ['船舶调度', '泊位分配', '作业监控'];
  }
  
  分配泊位(船舶信息, 可用泊位, 调度规则) {
    const 匹配泊位 = 调度规则.验证船舶泊位匹配(船舶信息, 可用泊位);
    if (匹配泊位) {
      return {
        成功: true,
        分配泊位: 匹配泊位,
        分配时间: new Date()
      };
    }
    return { 成功: false, 原因: '无匹配泊位' };
  }
}

class 桥吊操作员 {
  constructor(员工信息, 设备信息) {
    this.角色ID = generateUUID();
    this.员工信息 = 员工信息;
    this.设备信息 = 设备信息;
    this.角色类型 = '桥吊操作员';
    this.权限范围 = ['集装箱装卸', '设备操作'];
  }
  
  执行装卸作业(作业指令, 作业规则) {
    if (作业规则.验证重量限制(作业指令.集装箱信息, this.设备信息)) {
      return {
        成功: true,
        作业ID: 作业指令.作业ID,
        开始时间: new Date()
      };
    }
    return { 成功: false, 原因: '重量超限' };
  }
}

// ==================== 蓝色对象（地点-事物）====================

class 船舶 {
  constructor(船舶信息) {
    this.船舶ID = generateUUID();
    this.IMO号 = 船舶信息.IMO号;
    this.船名 = 船舶信息.船名;
    this.船长 = 船舶信息.船长;
    this.船宽 = 船舶信息.船宽;
    this.吃水 = 船舶信息.吃水;
    this.载重量 = 船舶信息.载重量;
    this.当前状态 = '锚泊';
    this.当前位置 = null;
  }
  
  更新状态(新状态) {
    this.当前状态 = 新状态;
    this.状态更新时间 = new Date();
  }
  
  分配泊位(泊位信息) {
    this.当前位置 = 泊位信息;
    this.泊位分配时间 = new Date();
  }
}

class 泊位 {
  constructor(泊位信息) {
    this.泊位ID = generateUUID();
    this.泊位编号 = 泊位信息.泊位编号;
    this.泊位长度 = 泊位信息.泊位长度;
    this.泊位深度 = 泊位信息.泊位深度;
    this.最大船舶长度 = 泊位信息.最大船舶长度;
    this.当前状态 = '空闲';
    this.当前船舶 = null;
  }
  
  分配船舶(船舶信息) {
    this.当前船舶 = 船舶信息;
    this.当前状态 = '占用';
  }
  
  检查可用性(船舶信息) {
    return this.当前状态 === '空闲' && 
           船舶信息.船长 <= this.最大船舶长度 &&
           船舶信息.吃水 <= this.泊位深度;
  }
}

class 集装箱 {
  constructor(集装箱信息) {
    this.集装箱ID = generateUUID();
    this.集装箱号 = 集装箱信息.集装箱号;
    this.尺寸 = 集装箱信息.尺寸;
    this.重量 = 集装箱信息.重量;
    this.货物类型 = 集装箱信息.货物类型;
    this.当前状态 = '在船';
    this.当前位置 = null;
  }
  
  更新状态(新状态) {
    this.当前状态 = 新状态;
    this.状态更新时间 = new Date();
  }
}

// ==================== 粉色对象（目录-规格）====================

class 船舶调度规则 {
  constructor() {
    this.规则ID = generateUUID();
    this.规则类型 = '船舶调度';
  }
  
  验证船舶泊位匹配(船舶信息, 可用泊位) {
    return 可用泊位.find(泊位 => 
      泊位.检查可用性(船舶信息)
    );
  }
}

class 集装箱作业规则 {
  constructor() {
    this.规则ID = generateUUID();
    this.规则类型 = '集装箱作业';
  }
  
  验证重量限制(集装箱信息, 设备信息) {
    return 集装箱信息.重量 <= 设备信息.承载能力;
  }
  
  验证状态转换(当前状态, 目标状态) {
    const 有效转换 = {
      '在船': ['卸船中', '装船中'],
      '卸船中': ['在堆场'],
      '在堆场': ['查验中', '提货中', '装船中'],
      '查验中': ['在堆场', '放行'],
      '放行': ['提货中', '装船中'],
      '提货中': ['已提货'],
      '装船中': ['在船']
    };
    return 有效转换[当前状态]?.includes(目标状态) || false;
  }
}

// ==================== 四色对象协作管理器 ====================

class 港口进出口流程管理器 {
  constructor() {
    this.绿色事件 = new Map();
    this.黄色角色 = new Map();
    this.蓝色实体 = new Map();
    this.粉色规格 = new Map();
    
    this.初始化规格();
  }
  
  初始化规格() {
    this.粉色规格.set('船舶调度规则', new 船舶调度规则());
    this.粉色规格.set('集装箱作业规则', new 集装箱作业规则());
  }
  
  // 处理船舶到港
  处理船舶到港(船舶信息, 到港时间) {
    // 创建绿色事件
    const 到港事件 = new 船舶到港事件(船舶信息, 到港时间, '锚地A');
    this.绿色事件.set(到港事件.事件ID, 到港事件);
    
    // 创建黄色角色
    if (!this.黄色角色.has('港口调度员')) {
      this.黄色角色.set('港口调度员', new 港口调度员({
        员工ID: generateUUID(),
        姓名: '调度员A',
        部门: '调度部'
      }));
    }
    
    // 创建蓝色实体
    const 船舶实体 = new 船舶(船舶信息);
    this.蓝色实体.set(船舶实体.船舶ID, 船舶实体);
    
    // 创建泊位
    const 泊位实体 = new 泊位({
      泊位编号: 'B001',
      泊位长度: 450,
      泊位深度: 18,
      最大船舶长度: 450
    });
    this.蓝色实体.set(泊位实体.泊位ID, 泊位实体);
    
    // 获取粉色规格
    const 调度规则 = this.粉色规格.get('船舶调度规则');
    const 调度员 = this.黄色角色.get('港口调度员');
    
    // 执行业务逻辑
    const 可用泊位 = [泊位实体];
    const 分配结果 = 调度员.分配泊位(船舶实体, 可用泊位, 调度规则);
    
    if (分配结果.成功) {
      到港事件.完成事件();
      船舶实体.分配泊位(分配结果.分配泊位);
      分配结果.分配泊位.分配船舶(船舶实体);
    }
    
    return 分配结果;
  }
  
  // 处理集装箱卸船
  处理集装箱卸船(集装箱信息, 船舶信息) {
    // 创建绿色事件
    const 卸船事件 = new 集装箱卸船事件(集装箱信息, 船舶信息, new Date());
    this.绿色事件.set(卸船事件.事件ID, 卸船事件);
    
    // 创建黄色角色
    if (!this.黄色角色.has('桥吊操作员')) {
      this.黄色角色.set('桥吊操作员', new 桥吊操作员({
        员工ID: generateUUID(),
        姓名: '操作员A'
      }, {
        设备ID: generateUUID(),
        设备编号: 'QC001',
        承载能力: 50
      }));
    }
    
    // 创建蓝色实体
    const 集装箱实体 = new 集装箱(集装箱信息);
    this.蓝色实体.set(集装箱实体.集装箱ID, 集装箱实体);
    
    // 获取粉色规格
    const 作业规则 = this.粉色规格.get('集装箱作业规则');
    const 操作员 = this.黄色角色.get('桥吊操作员');
    
    // 执行业务逻辑
    if (作业规则.验证重量限制(集装箱实体, 操作员.设备信息)) {
      const 作业结果 = 操作员.执行装卸作业({ 作业ID: generateUUID(), 集装箱信息 }, 作业规则);
      
      if (作业结果.成功) {
        集装箱实体.更新状态('在堆场');
        卸船事件.完成事件();
        return { 成功: true, 卸船事件: 卸船事件 };
      }
    }
    
    return { 成功: false, 原因: '作业执行失败' };
  }
  
  // 获取系统状态报告
  获取系统状态报告() {
    return {
      事件统计: {
        总事件数: this.绿色事件.size,
        已完成事件: Array.from(this.绿色事件.values()).filter(事件 => 事件.事件状态 === '已完成').length
      },
      角色统计: {
        总角色数: this.黄色角色.size,
        角色类型: Array.from(this.黄色角色.values()).map(角色 => 角色.角色类型)
      },
      实体统计: {
        总实体数: this.蓝色实体.size,
        船舶数量: Array.from(this.蓝色实体.values()).filter(实体 => 实体 instanceof 船舶).length,
        集装箱数量: Array.from(this.蓝色实体.values()).filter(实体 => 实体 instanceof 集装箱).length
      },
      规格统计: {
        总规格数: this.粉色规格.size,
        规格类型: Array.from(this.粉色规格.values()).map(规格 => 规格.规则类型)
      }
    };
  }
}

// ==================== 使用示例 ====================

// 创建港口流程管理器
const 港口管理器 = new 港口进出口流程管理器();

// 模拟船舶到港
const 船舶信息 = {
  IMO号: 'IMO1234567',
  船名: 'COSCO SHIPPING UNIVERSE',
  船长: 400,
  船宽: 59,
  吃水: 16,
  载重量: 20000,
  船舶类型: '集装箱船'
};

const 到港结果 = 港口管理器.处理船舶到港(船舶信息, new Date());
console.log('船舶到港结果:', 到港结果);

// 模拟集装箱卸船
const 集装箱信息 = {
  集装箱号: 'ABCD1234567',
  尺寸: '40HC',
  重量: 25,
  货物类型: '普通货物'
};

const 卸船结果 = 港口管理器.处理集装箱卸船(集装箱信息, 船舶信息);
console.log('集装箱卸船结果:', 卸船结果);

// 获取系统状态报告
const 状态报告 = 港口管理器.获取系统状态报告();
console.log('系统状态报告:', 状态报告);

module.exports = {
  港口进出口流程管理器,
  船舶到港事件,
  集装箱卸船事件,
  港口调度员,
  桥吊操作员,
  船舶,
  泊位,
  集装箱,
  船舶调度规则,
  集装箱作业规则
}; 
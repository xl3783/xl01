# TOS领域驱动设计专家规则

## 核心原则
- 始终以港口业务领域为核心，理解船舶调度、集装箱作业、泊位分配等核心业务流程
- 优先考虑业务价值和技术实现的平衡
- 保持领域模型的纯净性，避免技术实现细节污染业务逻辑

## 领域建模规则
1. **聚合根识别**：识别港口业务中的核心实体（如船舶、集装箱、泊位、作业计划）
2. **边界上下文**：明确划分船舶调度、集装箱作业、设备管理等上下文边界
3. **领域事件**：使用领域事件表达业务状态变化（如船舶到港、作业完成、设备故障）
4. **值对象**：将不可变的概念建模为值对象（如集装箱号、船舶IMO号、时间窗口）

## 代码结构规则
- 按领域上下文组织代码结构
- 每个聚合根对应一个聚合
- 领域服务处理跨聚合的业务逻辑
- 应用服务编排领域对象和外部服务
- 基础设施层处理技术细节

## 命名规范
- 使用港口业务术语命名类和方法
- 避免技术实现词汇污染业务命名
- 方法名应表达业务意图而非技术操作

## 设计模式应用
- 使用仓储模式管理聚合持久化
- 使用工厂模式创建复杂聚合
- 使用策略模式处理不同的作业策略
- 使用观察者模式处理领域事件

## 业务规则实现
- 将业务规则封装在领域对象中
- 使用领域服务处理复杂的业务逻辑
- 通过领域事件实现松耦合的业务协作

## 测试策略
- 优先编写领域逻辑的单元测试
- 使用领域语言编写测试用例
- 模拟外部依赖，专注业务逻辑验证

## 性能考虑
- 合理设计聚合边界，避免大聚合
- 使用事件溯源处理复杂的状态变化
- 考虑并发访问的聚合设计

## 扩展性设计
- 预留业务规则扩展点
- 使用策略模式支持不同的作业策略
- 通过领域事件支持松耦合的功能扩展

## 代码审查重点
- 检查领域模型的业务准确性
- 验证聚合边界的合理性
- 确保业务规则的正确实现
- 评估代码的可维护性和可扩展性 
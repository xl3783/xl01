// 四色建模测试用例
// 验证港口进出口流程四色建模的实现

const { 
  港口进出口流程管理器,
  船舶到港事件,
  集装箱卸船事件,
  港口调度员,
  桥吊操作员,
  船舶,
  泊位,
  集装箱,
  船舶调度规则,
  集装箱作业规则
} = require('./四色建模实现示例.js');

// 测试工具函数
function generateUUID() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0;
    const v = c == 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

// 测试数据
const 测试船舶信息 = {
  IMO号: 'IMO1234567',
  船名: 'COSCO SHIPPING UNIVERSE',
  船长: 400,
  船宽: 59,
  吃水: 16,
  载重量: 20000,
  船舶类型: '集装箱船'
};

const 测试集装箱信息 = {
  集装箱号: 'ABCD1234567',
  尺寸: '40HC',
  重量: 25,
  货物类型: '普通货物',
  来源地: '中国'
};

const 测试泊位信息 = {
  泊位编号: 'B001',
  泊位长度: 450,
  泊位深度: 18,
  最大船舶长度: 450
};

// ==================== 绿色对象测试 ====================

function 测试绿色事件对象() {
  console.log('=== 测试绿色事件对象 ===');
  
  // 测试船舶到港事件
  const 到港事件 = new 船舶到港事件(测试船舶信息, new Date(), '锚地A');
  console.log('船舶到港事件创建成功:', 到港事件.事件ID);
  console.log('事件状态:', 到港事件.事件状态);
  
  到港事件.完成事件();
  console.log('事件完成状态:', 到港事件.事件状态);
  console.log('完成时间:', 到港事件.完成时间);
  
  // 测试集装箱卸船事件
  const 卸船事件 = new 集装箱卸船事件(测试集装箱信息, 测试船舶信息, new Date());
  console.log('集装箱卸船事件创建成功:', 卸船事件.事件ID);
  console.log('事件类型:', 卸船事件.事件类型);
  
  console.log('绿色事件对象测试通过\n');
}

// ==================== 黄色对象测试 ====================

function 测试黄色角色对象() {
  console.log('=== 测试黄色角色对象 ===');
  
  // 测试港口调度员
  const 调度员 = new 港口调度员({
    员工ID: generateUUID(),
    姓名: '测试调度员',
    部门: '调度部'
  });
  
  console.log('港口调度员创建成功:', 调度员.角色ID);
  console.log('角色类型:', 调度员.角色类型);
  console.log('权限范围:', 调度员.权限范围);
  
  // 测试桥吊操作员
  const 操作员 = new 桥吊操作员({
    员工ID: generateUUID(),
    姓名: '测试操作员'
  }, {
    设备ID: generateUUID(),
    设备编号: 'QC001',
    承载能力: 50
  });
  
  console.log('桥吊操作员创建成功:', 操作员.角色ID);
  console.log('设备信息:', 操作员.设备信息.设备编号);
  
  console.log('黄色角色对象测试通过\n');
}

// ==================== 蓝色对象测试 ====================

function 测试蓝色实体对象() {
  console.log('=== 测试蓝色实体对象 ===');
  
  // 测试船舶实体
  const 船舶 = new 船舶(测试船舶信息);
  console.log('船舶创建成功:', 船舶.船舶ID);
  console.log('船名:', 船舶.船名);
  console.log('当前状态:', 船舶.当前状态);
  
  船舶.更新状态('靠泊');
  console.log('状态更新后:', 船舶.当前状态);
  
  // 测试泊位实体
  const 泊位 = new 泊位(测试泊位信息);
  console.log('泊位创建成功:', 泊位.泊位ID);
  console.log('泊位编号:', 泊位.泊位编号);
  console.log('当前状态:', 泊位.当前状态);
  
  // 测试泊位可用性检查
  const 可用性 = 泊位.检查可用性(测试船舶信息);
  console.log('泊位可用性检查:', 可用性);
  
  // 测试集装箱实体
  const 集装箱 = new 集装箱(测试集装箱信息);
  console.log('集装箱创建成功:', 集装箱.集装箱ID);
  console.log('集装箱号:', 集装箱.集装箱号);
  console.log('当前状态:', 集装箱.当前状态);
  
  集装箱.更新状态('在堆场');
  console.log('状态更新后:', 集装箱.当前状态);
  
  console.log('蓝色实体对象测试通过\n');
}

// ==================== 粉色对象测试 ====================

function 测试粉色规格对象() {
  console.log('=== 测试粉色规格对象 ===');
  
  // 测试船舶调度规则
  const 调度规则 = new 船舶调度规则();
  console.log('船舶调度规则创建成功:', 调度规则.规则ID);
  
  const 泊位 = new 泊位(测试泊位信息);
  const 匹配结果 = 调度规则.验证船舶泊位匹配(测试船舶信息, [泊位]);
  console.log('船舶泊位匹配验证:', 匹配结果 ? '匹配' : '不匹配');
  
  // 测试集装箱作业规则
  const 作业规则 = new 集装箱作业规则();
  console.log('集装箱作业规则创建成功:', 作业规则.规则ID);
  
  const 设备信息 = { 承载能力: 50 };
  const 重量验证 = 作业规则.验证重量限制(测试集装箱信息, 设备信息);
  console.log('重量限制验证:', 重量验证 ? '通过' : '不通过');
  
  const 状态转换验证 = 作业规则.验证状态转换('在船', '卸船中');
  console.log('状态转换验证:', 状态转换验证 ? '有效' : '无效');
  
  console.log('粉色规格对象测试通过\n');
}

// ==================== 四色对象协作测试 ====================

function 测试四色对象协作() {
  console.log('=== 测试四色对象协作 ===');
  
  // 创建港口流程管理器
  const 港口管理器 = new 港口进出口流程管理器();
  
  // 测试船舶到港流程
  console.log('开始测试船舶到港流程...');
  const 到港结果 = 港口管理器.处理船舶到港(测试船舶信息, new Date());
  console.log('船舶到港结果:', 到港结果.成功 ? '成功' : '失败');
  if (!到港结果.成功) {
    console.log('失败原因:', 到港结果.原因);
  }
  
  // 测试集装箱卸船流程
  console.log('开始测试集装箱卸船流程...');
  const 卸船结果 = 港口管理器.处理集装箱卸船(测试集装箱信息, 测试船舶信息);
  console.log('集装箱卸船结果:', 卸船结果.成功 ? '成功' : '失败');
  if (!卸船结果.成功) {
    console.log('失败原因:', 卸船结果.原因);
  }
  
  // 获取系统状态报告
  const 状态报告 = 港口管理器.获取系统状态报告();
  console.log('系统状态报告:');
  console.log('- 事件统计:', 状态报告.事件统计);
  console.log('- 角色统计:', 状态报告.角色统计);
  console.log('- 实体统计:', 状态报告.实体统计);
  console.log('- 规格统计:', 状态报告.规格统计);
  
  console.log('四色对象协作测试通过\n');
}

// ==================== 业务场景测试 ====================

function 测试业务场景() {
  console.log('=== 测试业务场景 ===');
  
  const 港口管理器 = new 港口进出口流程管理器();
  
  // 场景1：船舶到港并分配泊位
  console.log('场景1：船舶到港并分配泊位');
  const 场景1结果 = 港口管理器.处理船舶到港(测试船舶信息, new Date());
  console.log('场景1结果:', 场景1结果.成功 ? '成功' : '失败');
  
  // 场景2：集装箱卸船并堆存
  console.log('场景2：集装箱卸船并堆存');
  const 场景2结果 = 港口管理器.处理集装箱卸船(测试集装箱信息, 测试船舶信息);
  console.log('场景2结果:', 场景2结果.成功 ? '成功' : '失败');
  
  // 场景3：超重集装箱卸船（应该失败）
  console.log('场景3：超重集装箱卸船（应该失败）');
  const 超重集装箱信息 = {
    ...测试集装箱信息,
    重量: 60 // 超过设备承载能力
  };
  const 场景3结果 = 港口管理器.处理集装箱卸船(超重集装箱信息, 测试船舶信息);
  console.log('场景3结果:', 场景3结果.成功 ? '成功' : '失败');
  console.log('预期结果：失败（重量超限）');
  
  console.log('业务场景测试通过\n');
}

// ==================== 性能测试 ====================

function 测试性能() {
  console.log('=== 测试性能 ===');
  
  const 港口管理器 = new 港口进出口流程管理器();
  const 开始时间 = Date.now();
  
  // 模拟大量船舶到港
  for (let i = 0; i < 100; i++) {
    const 船舶信息 = {
      ...测试船舶信息,
      IMO号: `IMO${i.toString().padStart(7, '0')}`,
      船名: `测试船舶${i}`
    };
    港口管理器.处理船舶到港(船舶信息, new Date());
  }
  
  const 结束时间 = Date.now();
  const 耗时 = 结束时间 - 开始时间;
  
  console.log(`处理100艘船舶耗时: ${耗时}ms`);
  console.log(`平均每艘船舶处理时间: ${耗时 / 100}ms`);
  
  const 状态报告 = 港口管理器.获取系统状态报告();
  console.log('最终系统状态:', 状态报告);
  
  console.log('性能测试通过\n');
}

// ==================== 错误处理测试 ====================

function 测试错误处理() {
  console.log('=== 测试错误处理 ===');
  
  const 港口管理器 = new 港口进出口流程管理器();
  
  // 测试无效船舶信息
  console.log('测试无效船舶信息...');
  const 无效船舶信息 = {
    IMO号: '',
    船名: '',
    船长: -1,
    船宽: 0,
    吃水: 0,
    载重量: 0
  };
  
  try {
    const 结果 = 港口管理器.处理船舶到港(无效船舶信息, new Date());
    console.log('无效船舶信息处理结果:', 结果);
  } catch (错误) {
    console.log('捕获到错误:', 错误.message);
  }
  
  // 测试无效集装箱信息
  console.log('测试无效集装箱信息...');
  const 无效集装箱信息 = {
    集装箱号: '',
    尺寸: '',
    重量: -1,
    货物类型: ''
  };
  
  try {
    const 结果 = 港口管理器.处理集装箱卸船(无效集装箱信息, 测试船舶信息);
    console.log('无效集装箱信息处理结果:', 结果);
  } catch (错误) {
    console.log('捕获到错误:', 错误.message);
  }
  
  console.log('错误处理测试通过\n');
}

// ==================== 主测试函数 ====================

function 运行所有测试() {
  console.log('开始四色建模测试...\n');
  
  try {
    测试绿色事件对象();
    测试黄色角色对象();
    测试蓝色实体对象();
    测试粉色规格对象();
    测试四色对象协作();
    测试业务场景();
    测试性能();
    测试错误处理();
    
    console.log('所有测试通过！四色建模实现正确。');
  } catch (错误) {
    console.error('测试失败:', 错误);
  }
}

// 运行测试
if (require.main === module) {
  运行所有测试();
}

module.exports = {
  测试绿色事件对象,
  测试黄色角色对象,
  测试蓝色实体对象,
  测试粉色规格对象,
  测试四色对象协作,
  测试业务场景,
  测试性能,
  测试错误处理,
  运行所有测试
}; 